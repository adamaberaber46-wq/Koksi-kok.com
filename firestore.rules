/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for product catalogs and
 * strict user-ownership for personal data like shopping carts and user profiles.
 * Administrative access to site settings is not defined but can be added.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Publicly readable product categories.
 * - `/products/{productId}`: Publicly readable product information.
 * - `/users/{userId}`: User profile data, where `{userId}` matches the Firebase Auth UID.
 * - `/users/{userId}/shopping_cart_items/{cartItemId}`: Shopping cart items owned by the user.
 * - `/orders/{orderId}`: Orders placed by any user.
 * - `/users/{userId}/ai_outfit_suggestions/{suggestionId}`: AI outfit suggestions for a specific user.
 * - `/site_settings/{settingId}`: Global site settings (e.g., hero section content).
 *
 * Key Security Decisions:
 * - Public product catalog (categories, products) with open read access.
 * - User profiles and shopping carts are strictly user-owned.
 * - Orders are accessible to all users, but write access is not defined in the current rules.
 * - Site settings are accessible to all users, but write access is not defined in the current rules.
 * - Listing of user documents is not permitted to prevent data leakage.
 *
 * Denormalization for Authorization:
 * The `ShoppingCartItem` and `AiOutfitSuggestion` documents include `userId` to
 * enforce ownership and avoid costly queries to the `/users` collection.
 *
 * Structural Segregation:
 * Public product information is stored in top-level collections (`/categories`, `/products`),
 * while private user data is stored under the `/users/{userId}` path, enabling different
 * security rules for each type of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category information. Write access is denied.
     * @path /categories/{categoryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for product catalog.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product information. Write access is denied.
     * @path /products/{productId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && isOwner(userId)
     * @allow (get, list): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny  (create): if !isSignedIn() || !isOwner(userId)
     * @deny (get, list): if !isOwner(userId)
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Restricts access to a user's own profile data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for shopping cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create): if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow (get, list): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow (delete): if isExistingOwner(userId);
     * @deny  (create): if !isSignedIn() || !isOwner(userId) || request.resource.data.userId != userId;
     * @deny (get, list): if !isOwner(userId);
     * @deny (update): if !isExistingOwner(userId) || request.resource.data.userId != userId;
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Restricts access to a user's own shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read order information. Write access is denied.
     * @path /orders/{orderId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for order information.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for AI outfit suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create): if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
     * @allow (get, list): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId) && request.resource.data.userId == userId;
     * @allow (delete): if isExistingOwner(userId);
     * @deny  (create): if !isSignedIn() || !isOwner(userId) || request.resource.data.userId != userId;
     * @deny (get, list): if !isOwner(userId);
     * @deny (update): if !isExistingOwner(userId) || request.resource.data.userId != userId;
     * @deny (delete): if !isExistingOwner(userId);
     * @principle Restricts access to a user's own AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Allows anyone to read site settings information. Write access is denied.
     * @path /site_settings/{settingId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Shipping rates are public so anyone can list them. Write access is denied.
     * @path /shipping_rates
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read access for shipping rates.
     */
    match /shipping_rates {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}