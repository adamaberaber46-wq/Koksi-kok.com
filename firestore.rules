/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for certain collections (e.g., products, categories) and strict user-ownership for user-specific data (e.g., shopping carts, user profiles, outfit suggestions).
 *
 * Data Structure:
 * - Public data: Stored in top-level collections like `/products` and `/categories`.
 * - User-specific data: Nested under `/users/{userId}`, where `{userId}` corresponds to the Firebase Auth UID.
 * - Global settings: Stored in `/site_settings/{settingId}` for managing site-wide configurations.
 * - Orders: Stored in a top-level `/orders` collection.
 *
 * Key Security Decisions:
 * - Products and Categories are publicly readable.
 * - User profiles and associated data (shopping carts, outfit suggestions) are strictly user-owned.
 * - Users can only create their own profile and associated data.
 * - Orders are publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read products, but restricts writes.
     * @path /products/{productId}
     * @allow (get, list): if true (Public read access)
     * @deny (create, update, delete): if false (No write access for now)
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read categories, but restricts writes.
     * @path /categories/{categoryId}
     * @allow (get, list): if true (Public read access)
     * @deny (create, update, delete): if false (No write access for now)
     * @principle Allows public read access to category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Enforces user-ownership for user profiles. Users can only read/write their own profile data.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && isOwner(userId) (User can create their own profile)
     * @allow (get, update, delete): if isSignedIn() && isExistingOwner(userId) (User can read/update/delete their own profile)
     * @allow (list): if false (Listing users is not allowed)
     * @deny (create): if !isOwner(userId) (Cannot create a profile for another user)
     * @deny (update): if !isExistingOwner(userId) (Cannot update another user's profile)
     * @deny (delete): if !isExistingOwner(userId) (Cannot delete another user's profile)
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;

      /**
       * @description Enforces user-ownership for shopping cart items. Users can only manage their own cart items.
       * @path /users/{userId}/shopping_cart_items/{cartItemId}
       * @allow (create, get, update, delete, list): if isSignedIn() && isOwner(userId) (User can manage their own cart items)
       * @deny (create, get, update, delete, list): if !isOwner(userId) (Cannot manage another user's cart items)
       * @principle Enforces strict user-ownership for shopping cart data.
       */
      match /shopping_cart_items/{cartItemId} {
        allow create, get, update, delete, list: if isSignedIn() && isOwner(userId);
      }

      /**
       * @description Enforces user-ownership for AI outfit suggestions. Users can only manage their own suggestions.
       * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
       * @allow (create, get, update, delete, list): if isSignedIn() && isOwner(userId) (User can manage their own outfit suggestions)
       * @deny (create, get, update, delete, list): if !isOwner(userId) (Cannot manage another user's outfit suggestions)
       * @principle Enforces strict user-ownership for AI outfit suggestion data.
       */
      match /ai_outfit_suggestions/{suggestionId} {
        allow create, get, update, delete, list: if isSignedIn() && isOwner(userId);
      }
    }

    /**
     * @description Allows anyone to read orders, but restricts writes.
     * @path /orders/{orderId}
     * @allow (get, list): if true (Public read access)
     * @deny (create, update, delete): if false (No write access for now)
     * @principle Allows public read access to order information.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows authenticated users to read and write shipping rates
      * @path /shipping_rates/{shippingRateId}
      * @allow read, write: if isSignedIn();
      * @principle Only authenticated users can read and write shipping rates
      */
     match /shipping_rates/{shippingRateId} {
        allow get, list, create, update, delete: if isSignedIn();
     }

    /**
     * @description Allows anyone to read and write site settings.
     * @path /site_settings/{settingId}
     * @allow (get, list, create, update, delete): if true
     * @principle Allows anyone to read site settings
     */
    match /site_settings/{settingId} {
        allow get, list, create, update, delete: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}