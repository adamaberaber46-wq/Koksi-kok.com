/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for product catalogs and
 * strict user-ownership for personal data like shopping carts and user profiles.
 * Administrative access to Orders is not explicitly defined and thus not permitted.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Publicly readable product categories.
 * - `/products/{productId}`: Publicly readable product information.
 * - `/users/{userId}`: User profiles, accessible only to the owning user.
 * - `/users/{userId}/shopping_cart_items/{cartItemId}`: Shopping cart items owned by a specific user.
 * - `/orders/{orderId}`: Orders, not accessible to users, implicitly restricted.
 * - `/users/{userId}/ai_outfit_suggestions/{suggestionId}`: AI outfit suggestions specific to a user.
 * - `/site_settings/{settingId}`: Global site settings, no rules defined, implicitly restricted.
 *
 * Key Security Decisions:
 * - Public product catalog (categories and products) for all users.
 * - Strict ownership model for user profiles, shopping carts, and AI outfit suggestions.
 * - Listing of user documents is disallowed for privacy.
 * - Orders and Site settings are implicitly restricted due to a lack of defined rules.
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under `/users/{userId}` to enable easy ownership checks using `isOwner(userId)`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category data, but restricts writes.
     * @path /categories/{categoryId}
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Public read access for product categories.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read product data, but restricts writes.
     * @path /products/{productId}
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Public read access for product information.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to user profile data to the owning user.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && request.auth.uid == userId
     * @allow get: if isOwner(userId)
     * @deny list: if false
     * @allow update: if isExistingOwner(userId)
     * @allow delete: if isExistingOwner(userId)
     * @deny create: if !isSignedIn() || request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to shopping cart items to the owning user.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow get: if isOwner(userId)
     * @allow list: if isOwner(userId)
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to orders.
     * @path /orders/{orderId}
     * @deny get, list, create, update, delete: if false
     * @principle No user access to orders.
     */
    match /orders/{orderId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to AI outfit suggestions to the owning user.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow get: if isOwner(userId)
     * @allow list: if isOwner(userId)
     * @allow create: if isOwner(userId) && request.resource.data.userId == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to site settings.
     * @path /site_settings/{settingId}
     * @deny get, list, create, update, delete: if false
     * @principle No user access to site settings.
     */
    match /site_settings/{settingId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows anyone to read shipping rates data, but restricts writes.
     * @path /shipping_rates
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Public read access for shipping rates.
     */
    match /shipping_rates/{shippingRateId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}