/**
 * @file Firestore Security Rules for Style Store
 * @core_philosophy This ruleset enforces a combination of public read access for certain collections and strict user-ownership for user-specific data.
 * @data_structure
 *  - /categories/{categoryId}: Publicly readable product categories.
 *  - /products/{productId}: Publicly readable product information.
 *  - /users/{userId}: User profiles, accessible only by the user themselves.
 *  - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items, accessible only by the user.
 *  - /orders/{orderId}: Orders, publicly readable.
 *  - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions, accessible only by the user.
 *  - /site_settings/{settingId}: Site-wide settings, publicly readable.
 * @key_security_decisions
 *  - Public Read Access: Categories and Products are publicly readable to allow browsing without authentication.
 *  - User Ownership: User profiles, shopping carts, and AI outfit suggestions are strictly controlled by the owning user.
 *  - No User Listing: Listing all users is disallowed for privacy.
 *  - Orders: Orders are publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No one can create, update, or delete categories through the client.
     * @principle Public read access for product browsing.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No one can create, update, or delete products through the client.
     * @principle Public read access for product browsing.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow (get) User can read their own profile.
     * @allow (create) User can create their own profile, matching their auth UID.
     * @allow (update, delete) User can update/delete their own profile.
     * @deny (get, list) Other users cannot read or list user profiles.
     * @deny (create, update, delete) Other users cannot create, update, or delete user profiles.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to shopping cart items to the owning user.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list) User can read and list their own shopping cart items.
     * @allow (create) User can create shopping cart items in their own cart.
     * @allow (update, delete) User can update/delete items in their own cart.
     * @deny (get, list, create, update, delete) Other users cannot access another user's cart.
     * @principle Enforces user-ownership for shopping cart data.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to orders.
     * @path /orders/{orderId}
     * @allow (get, list) Any user can read order data.
     * @deny (create, update, delete) No one can create, update, or delete orders through the client.
     * @principle Public read access for order details (potentially for order tracking).
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to AI outfit suggestions to the owning user.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list) User can read and list their own AI outfit suggestions.
     * @allow (create) User can create AI outfit suggestions for themselves.
     * @allow (update, delete) User can update/delete their own AI outfit suggestions.
     * @deny (get, list, create, update, delete) Other users cannot access another user's suggestions.
     * @principle Enforces user-ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to site settings.
     * @path /site_settings/{settingId}
     * @allow (get, list) Any user can read site settings.
     * @deny (create, update, delete) No one can create, update, or delete site settings through the client.
     * @principle Public read access for global site configuration.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to shipping rates.
     * @path /shipping_rates
     * @allow (get, list) Any user can read shipping rates.
     * @deny (create, update, delete) No one can create, update, or delete shipping rates through the client.
     * @principle Public read access for shipping information.
     */
    match /shipping_rates {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  /**
   * @description Checks if the request is from a signed-in user.
   * @return True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user ID matches the provided user ID.
   * @param userId The user ID to compare against the authenticated user's ID.
   * @return True if the user is signed in and the user IDs match, false otherwise.
   * @example allow read: if isOwner("someUserId"); // Grants read access only to the user with UID "someUserId".
   * @principle Protects user-specific data by enforcing ownership.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    /**
   * @description Checks if the authenticated user ID matches the provided user ID and the document exists.
   * @param userId The user ID to compare against the authenticated user's ID.
   * @return True if the user is signed in and the user IDs match, false otherwise.
   * @example allow update, delete: if isExistingOwner("someUserId"); // Grants update access only to the user with UID "someUserId".
   * @principle Protects user-specific data by enforcing ownership.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}