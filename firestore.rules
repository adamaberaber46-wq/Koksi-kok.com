/**
 * @file Firestore Security Rules for Style Store App
 * @core_philosophy This ruleset enforces a combination of public read access for products and categories,
 *                  user-ownership for profile and shopping cart data, and allows admins to manage site settings.
 * @data_structure Products, categories, and orders are stored in top-level collections. User-related data
 *                 (profile, shopping cart, AI outfit suggestions) is nested under the `/users/{userId}` document.
 *                 Site-wide settings are stored in the `/site_settings` collection.
 * @key_security_decisions Public read access is granted for products and categories. User listing is disallowed
 *                        for privacy. All write operations are protected by authorization checks. The `site_settings`
 *                        collection should have custom logic when deployed to production that allows admins to alter site settings.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read categories, but restricts creation, updates, and deletion.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while restricting write operations.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read products, but restricts creation, updates, and deletion.
     * @path /products/{productId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while restricting write operations.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own profile. The userId in the path must match the authenticated user's UID.
     * @path /users/{userId}
     * @allow (create) User can create their profile if the userId matches their auth UID.
     * @allow (get, update, delete) User can get, update, and delete their profile if the userId matches their auth UID and the document exists.
     * @deny (create) User cannot create a profile with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) User cannot get, update, and delete a profile if the userId doesn't match their auth UID.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Allows a user to manage their own shopping cart items. The userId in the path must match the authenticated user's UID.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, update, delete, list) User can manage their own shopping cart items if the userId matches their auth UID.
     * @deny (create, get, update, delete, list) User cannot manage shopping cart items for other users.
     * @principle Enforces user-ownership for shopping cart data.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read orders, but restricts creation, updates, and deletion.
     * @path /orders/{orderId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while restricting write operations.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own AI outfit suggestions. The userId in the path must match the authenticated user's UID.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, update, delete, list) User can manage their own AI outfit suggestions if the userId matches their auth UID.
     * @deny (create, get, update, delete, list) User cannot manage AI outfit suggestions for other users.
     * @principle Enforces user-ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read site settings, but restricts creation, updates, and deletion.
     * @path /site_settings/{settingId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Provides public read access while restricting write operations.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ----- Helper functions -----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param userId The user ID to check against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     *              This is for update and delete operations.
     * @param userId The user ID to check against the request's auth UID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}