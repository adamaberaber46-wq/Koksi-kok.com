/**
 * @fileoverview Firestore Security Rules for the Style Store application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership. User-specific data is nested under the `/users/{userId}` path and secured using the `isOwner(userId)` function.
 * Top-level collections such as `products` and `categories` are publicly readable but only writable by authenticated users in an admin role.
 * All write operations are validated for existence to prevent accidental modifications to non-existent documents.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Stores product categories (publicly readable, admin-writable).
 * - `/products/{productId}`: Stores product information (publicly readable, admin-writable).
 * - `/users/{userId}`: Stores user profile data. Document ID is the Firebase Auth UID (owner-only access).
 * - `/users/{userId}/shopping_cart_items/{cartItemId}`: Stores shopping cart items for a user (owner-only access).
 * - `/orders/{orderId}`: Stores order information (publicly readable, admin-writable).
 * - `/users/{userId}/ai_outfit_suggestions/{suggestionId}`: Stores AI outfit suggestions for a user (owner-only access).
 * - `/site_settings/{settingId}`: Stores global site settings such as HeroSection content (publicly readable, admin-writable).
 *
 * Key Security Decisions:
 * - **No User Listing:** Listing all users is explicitly denied to protect user privacy.
 * - **Admin Role**: To address the user's request to have an admin account, all collections that are not nested under `/users/{userId}` will be admin-writable. For the prototyping phase, all signed in users will be considered admins.
 * - **Denormalization**: No denormalization is used as the data model already keeps ownership within the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to product categories, and write access for admins.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read-only access to product information, and write access for admins.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to user profile documents. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId) && request.resource.data.id == userId;
     * @allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny list: if !isOwner(userId);
     * @deny create: if !isOwner(userId) || request.resource.data.id != userId;
     * @deny update: if !isExistingOwner(userId) || request.resource.data.id != resource.data.id;
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for reads and writes; validates ownership on create and update.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to shopping cart items. Only the owner (user) can manage their own cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny list: if !isOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for shopping cart management.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to orders, and write access for admins.
     * @path /orders/{orderId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to AI outfit suggestions. Only the owner can manage their own suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow get, list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @deny get: if !isOwner(userId);
     * @deny list: if !isOwner(userId);
     * @deny create: if !isOwner(userId);
     * @deny update: if !isExistingOwner(userId);
     * @deny delete: if !isExistingOwner(userId);
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to site settings, and write access for admins.
     * @path /site_settings/{settingId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read, admin-only writes.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}