/**
 * @file Firestore Security Rules for Style Store App
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user-specific data,
 *                 while allowing public read access to product catalogs and categories.
 *                 Orders are stored in a top-level collection.
 * @dataStructure The database is structured with user data nested under `/users/{userId}`
 *                and publicly accessible data at the top level.
 * @keySecurityDecisions User listing is disallowed.
 *                         Write access to site settings is not covered and should be implemented
 *                         by the owner(s)/admin(s).
 * @denormalization Data required for authorization (e.g., userId) is duplicated within documents
 *                 to avoid costly `get()` calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     * @example isOwner("user123") returns true if request.auth.uid is "user123".
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match and the document exists.
     *                   Returns false if the document does not exist.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Allows read-only access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No user can create, update, or delete categories through client-side rules.
     * @principle Allows public read access to categories. Write access is restricted.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to product information.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @deny (create, update, delete) No user can create, update, or delete products through client-side rules.
     * @principle Allows public read access to products. Write access is restricted.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles, allowing each user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User can create their own profile if the user ID matches the auth UID.
     * @allow (get, update, delete) User can read, update, and delete their own profile.
     * @deny (create, update, delete) User cannot modify other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for each user.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, list, update, delete) User can manage their own shopping cart items.
     * @deny (create, get, list, update, delete) User cannot access other user's shopping cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all orders placed in the store.
     * @path /orders/{orderId}
     * @allow (get, list) Any user can read order data.
     * @deny (create, update, delete) No user can create, update, or delete orders through client-side rules.
     * @principle Allows public read access to orders. Write access is restricted.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages AI outfit suggestions for each user.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, list, update, delete) User can manage their own AI outfit suggestions.
     * @deny (create, get, list, update, delete) User cannot access other user's AI outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages global site settings.
     * @path /site_settings/{settingId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Implement admin-only write access.
     * @principle Allows public read access to site settings. Write access is restricted.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}