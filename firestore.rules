/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product catalogs and site settings.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items owned by a specific user.
 * - /orders/{orderId}: Public order information.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for a specific user.
 * - /site_settings/{settingId}: Global site settings, such as hero content and footer links.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and shopping cart items.
 * - Listing of user documents is disallowed for privacy reasons.
 * - Public read access is granted for products and categories.
 * - Orders are publicly readable and writable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to product categories for all users.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category information.
     * @deny (create, update, delete) No one can create, update, or delete categories through the client. These operations should be handled by backend.
     * @principle Public read access for catalog data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to product information for all users.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) No one can create, update, or delete products through the client. These operations should be handled by backend.
     * @principle Public read access for catalog data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles, ensuring only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) The user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) The user can read, update, and delete their own profile if authenticated and the userId matches their auth UID.
     * @deny (list) Listing user documents is not allowed.
     * @principle Enforces document ownership and prevents unauthorized access to user data.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow create: if isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages shopping cart items for a specific user.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, update, delete, list) Only the authenticated user can manage their own shopping cart items.
     * @deny None.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Allows read and write access to order information for all users.
     * @path /orders/{orderId}
     * @allow (get, list, create, update, delete) Any user can read, write, and list order information.
     * @principle Public access for order information.
     */
    match /orders/{orderId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Manages AI outfit suggestions for a specific user.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, update, delete, list) Only the authenticated user can manage their own AI outfit suggestions.
     * @deny None.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages global site settings, such as the hero section and footer links.
     * @path /site_settings/{settingId}
     * @allow (get, list) Any user can read site settings.
     * @deny (create, update, delete) No one can create, update, or delete site settings through the client. These operations should be handled by backend.
     * @principle Public read access for site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }


    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is signed in and the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is signed in, the UIDs match, and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}