rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Grants read access to all authenticated users.
     */
    function isAuthenticated() {
        return request.auth != null;
    }

    /**
     * @description Grants write access only to admins.  Not yet implemented.
     */
    function isAdmin() {
      return false;
    }

    /**
     * @description Defines the valid data structure for the categories documents.
     */
    function hasValidCategoryData() {
        return true;
    }

    /**
     * @description Defines the valid data structure for the products documents.
     */
    function hasValidProductData() {
        return true;
    }

    /**
     * @description Defines the valid data structure for the site settings documents.
     */
    function hasValidSiteSettingsData() {
        return true;
    }

    /**
     * @description
     * Defines the valid data structure for the shopping cart item documents.
     */
    function hasValidShoppingCartItemData() {
      return true;
    }

    /**
     * @description Defines the valid data structure for the order documents.
     */
    function hasValidOrderData() {
      return true;
    }

    /**
     * @description Defines the valid data structure for the AI outfit suggestion documents.
     */
    function hasValidAiOutfitSuggestionData() {
      return true;
    }


    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read any category.
     * @allow (create, update, delete): No one can create, update, or delete categories except through the console
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read any product.
     * @allow (create, update, delete): No one can create, update, or delete products except through the console.
     * @principle Allows public read access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get, list): Only the user can read their own profile. User listing is disallowed.
     * @allow (create): Only the user can create their own profile.
     * @allow (update, delete): Only the user can update or delete their own profile, and the profile must already exist.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(resource);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/shopping_cart_items/{cartItemId} collection.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list): Only the user can read their own shopping cart items.
     * @allow (create, update, delete): Only the user can create, update, or delete their own shopping cart items.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(resource);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get, list): Any authenticated user can get, list order data.
     * @allow (create, update, delete): Only admins can create, update or delete order data.
     * @principle Restricts order creation, updates, and deletion to admins.
     */
    match /orders/{orderId} {
      allow get, list: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/ai_outfit_suggestions/{suggestionId} collection.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list): Only the user can read their own AI outfit suggestions.
     * @allow (create, update, delete): Only the user can create, update, or delete their own AI outfit suggestions.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && existsAfter(resource);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /site_settings/{settingId} collection.
     * @path /site_settings/{settingId}
     * @allow (get, list): Any authenticated user can get and list site settings.
     * @allow (create, update, delete): Only admins can create, update, and delete site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /shipping_rates collection.
     * @path /shipping_rates
     * @allow (get, list): Any authenticated user can get and list shipping rates.
     * @allow (create, update, delete): Nobody can create, update or delete shipping rates.
     */
    match /shipping_rates {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if false;
    }
  }
}