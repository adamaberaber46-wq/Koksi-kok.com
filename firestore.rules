/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for personal data and allows public read access to product catalog data.
 *
 * Data Structure:
 * - Products and Categories are stored in top-level collections for public read access.
 * - User profiles, shopping cart items, and AI outfit suggestions are nested under /users/{userId} for private, user-owned data.
 * - Orders are stored in a top-level collection.
 * - Global site settings are stored in the top-level `site_settings` collection.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles and related data.
 * - Product and category data is publicly readable.
 * - Shipping rates collection is publicly readable.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under the user's document, eliminating the need for `get()` calls to verify ownership.
 *
 * Structural Segregation:
 *  - Private user data is stored under the `/users/{userId}` path, while public product and category data resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is authenticated and the document exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read category data.
     * @deny (create, update, delete): No one can create, update, or delete category data.
     * @principle Allows public read access to category data and restricts write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read product data.
     * @deny (create, update, delete): No one can create, update, or delete product data.
     * @principle Allows public read access to product data and restricts write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create): Only the user themselves can create their profile.
     * @allow (get, update, delete): Only the user themselves can get, update, or delete their profile.
     * @deny (list): Listing all users is not allowed.
     * @principle Enforces user-ownership for profile data and prevents listing all users.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId}/shopping_cart_items/{cartItemId} collection.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (create, get, update, delete, list): Only the user themselves can manage their shopping cart items.
     * @principle Enforces user-ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, update, delete: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (get, list): Anyone can read all order data.
     * @deny (create, update, delete): No one can create, update, or delete order data.
     * @principle Allows public read access to order data and restricts write access.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /users/{userId}/ai_outfit_suggestions/{suggestionId} collection.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (create, get, update, delete, list): Only the user themselves can manage their AI outfit suggestions.
     * @principle Enforces user-ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, update, delete: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow list: if isOwner(userId);
    }

    /**
     * @description Rules for the /site_settings/{settingId} collection.
     * @path /site_settings/{settingId}
     * @allow (get, list): Anyone can read site settings data.
     * @deny (create, update, delete): No one can create, update, or delete site settings data.
     * @principle Allows public read access to site settings and restricts write access.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
   /**
    * @description Rules for the /shipping_rates collection.
    * @path /shipping_rates
    * @allow (get, list): Anyone can read shipping rates data.
    * @deny (create, update, delete): No one can create, update, or delete shipping rates data.
    * @principle Allows public read access to shipping rates and restricts write access.
    */
    match /shipping_rates {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}