/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data while allowing public read access to product catalogs and site settings.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items owned by a specific user.
 * - /orders/{orderId}: Orders placed in the store. Accessible to all users.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions specific to a user.
 * - /site_settings/{settingId}: Global site settings (hero section, footer links). Publicly readable.
 * - /shipping_rates: Publicly readable, but not writable, as requested by the customer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data and shopping cart items.
 * - Product categories, products, site settings, and orders are publicly readable.
 * - Listing of user documents is disallowed.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 *  - User-specific documents (e.g., shopping cart items, AI outfit suggestions) include a `userId` field matching the document path to simplify ownership checks.
 *
 * Structural Segregation:
 *  - Private user data is stored under /users/{userId} to ensure clear separation and enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read category data.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category information.
     * @deny (create, update, delete): No one can create, update, or delete categories through the client.
     * @principle Allows public read access to category information.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read product data.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No one can create, update, or delete products through the client.
     * @principle Allows public read access to product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get): Authenticated user can get their own profile.
     * @allow (create): Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): Authenticated user can update/delete their own profile if the userId matches their auth UID and the document exists.
     * @allow (list): Listing user documents is denied.
     * @deny (get, create, update, delete): Any other user cannot access this data.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for a user. Only the authenticated user can read/write their own cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list): Authenticated user can get/list their own cart items.
     * @allow (create): Authenticated user can create a cart item if the userId matches their auth UID.
     * @allow (update, delete): Authenticated user can update/delete their own cart items if the userId matches their auth UID and the document exists.
     * @deny (get, create, update, delete, list): Any other user cannot access this data.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read order data.
     * @path /orders/{orderId}
     * @allow (get, list): Any user can read order information.
     * @deny (create, update, delete): No one can create, update, or delete orders through the client.
     * @principle Allows public read access to order information.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages AI outfit suggestions for a user. Only the authenticated user can read/write their own suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list): Authenticated user can get/list their own outfit suggestions.
     * @allow (create): Authenticated user can create an outfit suggestion if the userId matches their auth UID.
     * @allow (update, delete): Authenticated user can update/delete their own outfit suggestions if the userId matches their auth UID and the document exists.
     * @deny (get, create, update, delete, list): Any other user cannot access this data.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read site settings data.
     * @path /site_settings/{settingId}
     * @allow (get, list): Any user can read site settings information.
     * @deny (create, update, delete): No one can create, update, or delete site settings through the client.
     * @principle Allows public read access to site settings information.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
     /**
     * @description Allows anyone to read shipping rates data.
     * @path /shipping_rates
     * @allow (get, list): Any user can read shipping rates information.
     * @deny (create, update, delete): No one can create, update, or delete shipping rates through the client.
     * @principle Allows public read access to shipping rates information.
     */
    match /shipping_rates {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Define helper functions here
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}