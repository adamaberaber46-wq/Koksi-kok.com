/**
 * @file Firestore Security Rules for Style Store App
 * @corePhilosophy This ruleset enforces a combination of public read access for product catalogs and owner-only access for user-specific data.
 * @dataStructure
 *  - Products and Categories are stored in top-level collections for public access.
 *  - User profiles and their related data (shopping carts, outfit suggestions) are nested under `/users/{userId}`.
 *  - Orders are stored in a top-level collection.
 *  - Site settings are stored in the top-level `site_settings` collection.
 * @keySecurityDecisions
 *  - Public read access for products and categories to allow open browsing.
 *  - Strict user ownership for profile data, shopping carts, and outfit suggestions.
 *  - Orders are accessible to anyone.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read. Only signed-in user can create. Owner can update and delete.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @allow (create) - User must be signed in.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not signed in
     * @deny (update, delete) - if the user is not the owner.
     * @principle Allows public reading but restricts modification to authenticated owner.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read. Only signed-in user can create. Owner can update and delete.
     * @path /products/{productId}
     * @allow (get, list)
     * @allow (create) - User must be signed in.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not signed in
     * @deny (update, delete) - if the user is not the owner.
     * @principle Allows public reading but restricts modification to authenticated owner.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages user profiles, enforcing owner-only access.
     * @path /users/{userId}
     * @allow (create) - The user can create their own profile.
     * @allow (get, list) - The user can get their own profile. Listing all users is disallowed.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user ID doesn't match the authenticated user's ID.
     * @deny (update, delete) - if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages shopping cart items for a user, enforcing owner-only access.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list) - The user can get their own shopping cart items.
     * @allow (create) - Only the owner can create.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not the owner.
     * @deny (update, delete) - if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read. Only signed-in user can create. Owner can update and delete.
     * @path /orders/{orderId}
     * @allow (get, list)
     * @allow (create) - User must be signed in.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not signed in
     * @deny (update, delete) - if the user is not the owner.
     * @principle Allows public reading but restricts modification to authenticated owner.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages AI outfit suggestions for a user, enforcing owner-only access.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list) - The user can get their own AI outfit suggestions.
     * @allow (create) - Only the owner can create.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not the owner.
     * @deny (update, delete) - if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read. Only signed-in user can create. Owner can update and delete.
     * @path /site_settings/{settingId}
     * @allow (get, list)
     * @allow (create) - User must be signed in.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not signed in
     * @deny (update, delete) - if the user is not the owner.
     * @principle Allows public reading but restricts modification to authenticated owner.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read. Only signed-in user can create. Owner can update and delete.
     * @path /shipping_rates
     * @allow (get, list)
     * @allow (create) - User must be signed in.
     * @allow (update, delete) - Only the owner can update or delete.
     * @deny (create) - if the user is not signed in
     * @deny (update, delete) - if the user is not the owner.
     * @principle Allows public reading but restricts modification to authenticated owner.
     */
    match /shipping_rates {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}