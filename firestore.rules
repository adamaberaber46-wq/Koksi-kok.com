/**
 * @fileoverview Firestore Security Rules for Style Store.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data while allowing public read access to product catalogs and categories.
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product categories, publicly readable.
 * - /products/{productId}: Stores product information, publicly readable.
 * - /users/{userId}: Stores user profile data, only accessible by the user. Document ID is the Firebase Auth UID.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items for a user, only accessible by the user.
 * - /orders/{orderId}: Stores all orders, accessible to all users.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions for a user, only accessible by the user.
 * - /site_settings/{settingId}: Stores global site settings, publicly readable.
 *
 * Key Security Decisions:
 * - Public read access is granted to categories, products, and site settings to allow browsing without authentication.
 * - User profiles and shopping cart items are protected by owner-only access.
 * - Orders are accessible to all users.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to product categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Signed-in or anonymous user can read category details.
     * @deny (create, update, delete) No one can create, update, or delete categories through the client.
     * @principle Public read, no write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to product information.
     * @path /products/{productId}
     * @allow (get, list) Signed-in or anonymous user can read product details.
     * @deny (create, update, delete) No one can create, update, or delete products through the client.
     * @principle Public read, no write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) Authenticated user with matching UID can manage their profile.
     * @deny (get, create, update, delete) Any other user or unauthenticated user cannot access this profile.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
      allow list: if false; // No listing of users.
    }

    /**
     * @description Manages shopping cart items for a specific user. Only the authenticated user can manage their own cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, create, update, delete) Authenticated user with matching UID can manage their cart items.
     * @deny (get, create, update, delete) Any other user or unauthenticated user cannot access these cart items.
     * @principle Enforces document ownership within a subcollection.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to orders.
     * @path /orders/{orderId}
     * @allow (get, list) Signed-in or anonymous user can read order details.
     * @deny (create, update, delete) No one can create, update, or delete orders through the client.
     * @principle Public read, no write access.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages AI outfit suggestions for a specific user. Only the authenticated user can manage their own suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, create, update, delete) Authenticated user with matching UID can manage their AI outfit suggestions.
     * @deny (get, create, update, delete) Any other user or unauthenticated user cannot access these suggestions.
     * @principle Enforces document ownership within a subcollection.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read-only access to global site settings.
     * @path /site_settings/{settingId}
     * @allow (get, list) Signed-in or anonymous user can read site settings.
     * @deny (create, update, delete) No one can create, update, or delete site settings through the client.
     * @principle Public read, no write access.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read-only access to shipping rates.
     * @path /shipping_rates
     * @allow (get, list) Signed-in or anonymous user can read shipping rates.
     * @deny (create, update, delete) No one can create, update, or delete shipping rates through the client.
     * @principle Public read, no write access.
     */
    match /shipping_rates {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}