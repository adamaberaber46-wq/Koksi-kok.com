/**
 * @fileoverview Firestore Security Rules for Style Store App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to product catalogs and site settings.
 * Write access to most collections is restricted to authenticated users,
 * with specific ownership checks to prevent unauthorized data modification.
 *
 * Data Structure:
 * - /categories/{categoryId}: Public product categories.
 * - /products/{productId}: Public product information.
 * - /users/{userId}: User profiles (document ID is the Firebase Auth UID).
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items for a user.
 * - /orders/{orderId}: All orders placed in the store (potentially admin-managed).
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for a user.
 * - /site_settings/{settingId}: Global site settings (e.g., hero, footer).
 *
 * Key Security Decisions:
 * - Listing all users is disallowed.
 * - Public read access to /categories and /products.
 * - Strict ownership checks for /users/{userId} and subcollections.
 * - Orders are open to all users to read and write.
 * - Site settings are open to all users to read and write.
 *
 * Denormalization for Authorization:
 *   - User-specific data is nested under the /users/{userId} path,
 *     allowing for simple `isOwner(userId)` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     *              This function combines the ownership check with the existence check
     *              (isOwner(userId) && resource != null).
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user IDs match, and the document exists
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for product categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read product categories.
     * @deny (create, update, delete): No user can create, update, or delete categories through client-side rules.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for product information.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete products through client-side rules.
     * @principle Allows public read access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get): Any authenticated user can get their own profile.
     * @allow (create): Any authenticated user can create their profile if the user ID matches their auth UID.
     * @allow (update): Only the owner can update their own profile.
     * @allow (delete): Only the owner can delete their own profile.
     * @deny (list): Listing all users is not allowed.
     * @deny (create): Creating a user profile with a mismatched user ID is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for shopping cart items.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list): Only the owner can read their own shopping cart items.
     * @allow (create): Only the owner can create shopping cart items in their own cart.
     * @allow (update): Only the owner can update shopping cart items in their own cart.
     * @allow (delete): Only the owner can delete shopping cart items from their own cart.
     * @deny (create): Creating a shopping cart item with a mismatched user ID is not allowed.
     * @principle Enforces document ownership for shopping cart items.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for orders.
     * @path /orders/{orderId}
     * @allow get, list, create, update, delete: if true;
     * @principle Orders can be read, created, updated, and deleted by any user.
     */
    match /orders/{orderId} {
        allow get, list, create, update, delete: if true;
    }

    /**
     * @description Rules for AI outfit suggestions.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list): Only the owner can read their own AI outfit suggestions.
     * @allow (create): Only the owner can create AI outfit suggestions for their own profile.
     * @allow (update): Only the owner can update their own AI outfit suggestions.
     * @allow (delete): Only the owner can delete their own AI outfit suggestions.
     * @deny (create): Creating an AI outfit suggestion with a mismatched user ID is not allowed.
     * @principle Enforces document ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for site settings.
     * @path /site_settings/{settingId}
     * @allow get, list, create, update, delete: if true;
     * @principle Site settings can be read, created, updated, and deleted by any user.
     */
    match /site_settings/{settingId} {
        allow get, list, create, update, delete: if true;
    }
    
      /**
       * @description Shipping rates are publicly accessible.
       * @path /shipping_rates
       * @allow get, list: Any user can read shipping rates.
       * @deny create, update, delete: No user can create, update, or delete shipping rates through client-side rules.
       * @principle Allows public read access to shipping rates.
       */
      match /shipping_rates {
        allow get, list: if true;
        allow create, update, delete: if false;
      }
  }
}