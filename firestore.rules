/**
 * @fileoverview Firestore Security Rules for Style Store.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for product catalogs and
 * strict user-ownership for personal data like profiles, shopping carts, and AI outfit suggestions.
 * Global site settings are publicly readable but should be secured with more fine-grained
 * rules in a production environment (e.g., only allow admin accounts to modify them).
 *
 * Data Structure:
 * - /categories/{categoryId}: Stores product category data. Publicly readable.
 * - /products/{productId}: Stores product information. Publicly readable.
 * - /users/{userId}: Stores user profile data. Only accessible by the user themselves.
 * - /users/{userId}/shopping_cart_items/{cartItemId}: Shopping cart items for a specific user. Only accessible by that user.
 * - /orders/{orderId}: Stores order data. Publicly readable.
 * - /users/{userId}/ai_outfit_suggestions/{suggestionId}: AI outfit suggestions for a user. Only accessible by that user.
 * - /site_settings/{settingId}: Stores global site settings (e.g., hero section content). Publicly readable.
 *
 * Key Security Decisions:
 * - Product catalogs and categories are publicly readable to facilitate browsing.
 * - User profiles and related data are strictly controlled by user ownership.
 * - Orders are publicly readable in this prototyping phase, but this may need to be adjusted.
 * - Global site settings are publicly readable, but write access should be restricted in production.
 * - Listing of documents in the `orders` collection is allowed for all users in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all users for categories.  Restricts writes.
     * @path /categories/{categoryId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read access to all users for products. Restricts writes.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to product data.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles, ensuring users can only access their own profile data.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny list: if false;
     * @principle Enforces user-ownership for profile data and related subcollections.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

       /**
         * @description Manages shopping cart items for a user, ensuring only the owner can access them.
         * @path /users/{userId}/shopping_cart_items/{cartItemId}
         * @allow get, list: if isSignedIn() && isOwner(userId);
         * @allow create: if isSignedIn() && isOwner(userId);
         * @allow update: if isSignedIn() && isExistingOwner(userId);
         * @allow delete: if isExistingOwner(userId);
         * @principle Enforces user-ownership for shopping cart data.
         */
      match /shopping_cart_items/{cartItemId} {
        allow get, list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      /**
       * @description Manages AI outfit suggestions for a user, ensuring only the owner can access them.
       * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
       *  @allow get, list: if isSignedIn() && isOwner(userId);
       *  @allow create: if isSignedIn() && isOwner(userId);
       *  @allow update: if isSignedIn() && isExistingOwner(userId);
       *  @allow delete: if isExistingOwner(userId);
       * @principle Enforces user-ownership for AI outfit suggestions.
       */
      match /ai_outfit_suggestions/{suggestionId} {
          allow get, list: if isSignedIn() && isOwner(userId);
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if isSignedIn() && isExistingOwner(userId);
          allow delete: if isExistingOwner(userId);
      }
    }

    /**
     * @description Grants read access to all users for orders.  Restricts writes.
     * @path /orders/{orderId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access to order data.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Grants read access to all users for site settings. Restricts writes.
      * @path /site_settings/{settingId}
      * @allow get, list: if true;
      * @deny create, update, delete: if false; // TODO: Restrict write access to admin users only.
      * @principle Allows public read access to site settings.
      */
    match /site_settings/{settingId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Restrict write access to admin users only.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}