/**
 * @file Firestore Security Rules for Style Store
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 *  (profiles, shopping carts, AI suggestions) and provides public read access to products and categories.
 *  Orders are accessible to all authenticated users, simulating a minimal admin role.
 * @data_structure
 *  - /categories/{categoryId}: Stores product categories, publicly readable.
 *  - /products/{productId}: Stores product information, publicly readable.
 *  - /users/{userId}: Stores user profile data, only accessible to the user.
 *  - /users/{userId}/shopping_cart_items/{cartItemId}: Stores shopping cart items for a user, only accessible to the user.
 *  - /orders/{orderId}: Stores all orders, accessible to all authenticated users.
 *  - /users/{userId}/ai_outfit_suggestions/{suggestionId}: Stores AI outfit suggestions for a user, only accessible to the user.
 *  - /site_settings/{settingId}: Stores global site settings, no access control implemented.
 *  - /shipping_rates: Stores shipping rates, accessible to all authenticated users.
 *
 * @key_security_decisions
 *  - Public read access for categories and products to allow browsing without authentication.
 *  - User-specific data is strictly controlled by ownership.
 *  - Orders are accessible to all authenticated users (minimal admin simulation).
 *  - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the categories collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can modify category data.
     * @principle Allows public read access to categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the products collection.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @deny (create, update, delete): No user can modify product data.
     * @principle Allows public read access to products.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the users collection.
     * @path /users/{userId}
     * @allow (create): Only the user with matching ID can create their profile.
     * @allow (get, update, delete): Only the user with matching ID can access/modify their profile.
     * @deny list: User listing is not allowed.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow list: if false;
    }

    /**
     * @description Rules for the shopping_cart_items subcollection under users.
     * @path /users/{userId}/shopping_cart_items/{cartItemId}
     * @allow (get, list, create, update, delete): Only the user with matching ID can access/modify their cart items.
     * @principle Enforces user ownership for shopping cart data.
     */
    match /users/{userId}/shopping_cart_items/{cartItemId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the orders collection.
     * @path /orders/{orderId}
     * @allow (get, list, create): Any signed-in user can create and read orders.
     * @deny (update, delete): No user can update or delete orders.
     * @principle Allows any signed-in user to create and read orders.
     */
    match /orders/{orderId} {
      allow get, list, create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for the ai_outfit_suggestions subcollection under users.
     * @path /users/{userId}/ai_outfit_suggestions/{suggestionId}
     * @allow (get, list, create, update, delete): Only the user with matching ID can access/modify their AI outfit suggestions.
     * @principle Enforces user ownership for AI outfit suggestions.
     */
    match /users/{userId}/ai_outfit_suggestions/{suggestionId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Rules for the site_settings collection.
     * @path /site_settings/{settingId}
     * @allow (get, list): Any user can read site settings.
     * @deny (create, update, delete): No user can modify site settings.
     * @principle Allows public read access to site settings.
     */
    match /site_settings/{settingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Rules for the shipping_rates collection.
      * @path /shipping_rates
      * @allow get, list: Any signed-in user can read shipping rates.
      * @deny create, update, delete: No user can create, update, or delete shipping rates.
      * @principle Allows public read access to shipping rates for signed-in users.
      */
     match /shipping_rates {
       allow get, list: if isSignedIn();
       allow create, update, delete: if false;
     }
  }
}